<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LinDs</title>
  
  <subtitle>技术创造生活，技术也来源于生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-25T11:58:18.597Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Dayson</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql中的索引</title>
    <link href="http://yoursite.com/2018/05/25/sql/mysql%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95/"/>
    <id>http://yoursite.com/2018/05/25/sql/mysql中的索引/</id>
    <published>2018-05-25T11:37:25.944Z</published>
    <updated>2018-05-25T11:58:18.597Z</updated>
    
    <content type="html"><![CDATA[<h4 id="索引是什么"><a href="#索引是什么" class="headerlink" title="索引是什么"></a>索引是什么</h4><blockquote><p>　索引（Index）是帮助MySQL高效获取数据的数据结构。可以得到索引的本质：索引是数据结构。</p><p>　　可以理解为“排好序的快速查找数据结构”</p><p>　　在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据,</p><p>　　这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</p></blockquote><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><blockquote><p>类似大学图书馆建书目索引，不用扫描全表，直接通过索引检索，提高数据检索效率，降低数据库的IO成本。</p><p>通过索引对数据进行排序，降低数据排序的成本，降低了CPU的消耗.</p></blockquote><h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h4><blockquote><p>实际上索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也是要占空间的。</p><p>虽然索引大大提高了查询速度，同时确会降低更新表的速度，如对表进行INSERT、UPDATE、DELETE。</p><p>因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段。</p><p>都会调整因为更新所带来的键值变化后的索引信息。 </p></blockquote><h4 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h4><blockquote><ol><li>单值索引：即一个索引只包含单个列，一个表可以有多个单列索引。</li><li>唯一索引：索引列的值必须唯一，但允许有空值。</li><li>复合索引：即一个索引包含多个列</li></ol></blockquote><h4 id="什么时候用，什么时候不该用？"><a href="#什么时候用，什么时候不该用？" class="headerlink" title="什么时候用，什么时候不该用？"></a>什么时候用，什么时候不该用？</h4><blockquote><p>主键自动建立索引；</p><p>频繁作为查询条件的字段要建立索引；</p><p>查询中与其他表关联的字段，外键关系建立索引；</p><p>查询中用于排序的字段；</p><p>查询中用于统计或分组的字段；</p><p>频繁更新的字段不宜建立索引，每次更新记录的时候还会更新索引；</p><p>表记录较少的时候</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;索引是什么&quot;&gt;&lt;a href=&quot;#索引是什么&quot; class=&quot;headerlink&quot; title=&quot;索引是什么&quot;&gt;&lt;/a&gt;索引是什么&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;　索引（Index）是帮助MySQL高效获取数据的数据结构。可以得到索引的本质：索引是数据
      
    
    </summary>
    
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>python的list去重</title>
    <link href="http://yoursite.com/2018/05/03/python/python%E7%9A%84list%E5%8E%BB%E9%87%8D/"/>
    <id>http://yoursite.com/2018/05/03/python/python的list去重/</id>
    <published>2018-05-03T15:38:04.362Z</published>
    <updated>2018-05-03T15:38:04.938Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-使用set"><a href="#1-使用set" class="headerlink" title="1.使用set()"></a>1.使用set()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">89</span>,<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=list(set(a))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">89</span>]</span><br></pre></td></tr></table></figure><h3 id="2-使用字典"><a href="#2-使用字典" class="headerlink" title="2.使用字典"></a>2.使用字典</h3><blockquote><p>关键在于利用字典的key不能重复</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">89</span>,<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=&#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=b.fromkeys(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">&#123;<span class="number">1</span>: <span class="keyword">None</span>, <span class="number">2</span>: <span class="keyword">None</span>, <span class="number">3</span>: <span class="keyword">None</span>, <span class="number">4</span>: <span class="keyword">None</span>, <span class="number">5</span>: <span class="keyword">None</span>, <span class="number">6</span>:<span class="keyword">None</span>, <span class="number">7</span>: <span class="keyword">None</span>, <span class="number">89</span>: <span class="keyword">None</span>, <span class="number">0</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=list(b.keys())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">89</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><blockquote><p>目前只知道这两种，可能还有其他方法</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-使用set&quot;&gt;&lt;a href=&quot;#1-使用set&quot; class=&quot;headerlink&quot; title=&quot;1.使用set()&quot;&gt;&lt;/a&gt;1.使用set()&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>The Zen of Python（python之禅）</title>
    <link href="http://yoursite.com/2018/04/23/python/The-Zen-of-Python%EF%BC%88python%E4%B9%8B%E7%A6%85%EF%BC%89/"/>
    <id>http://yoursite.com/2018/04/23/python/The-Zen-of-Python（python之禅）/</id>
    <published>2018-04-23T04:00:56.746Z</published>
    <updated>2018-04-23T04:00:56.904Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Beautiful is better than ugly.<br>Explicit is better than implicit.<br>Simple is better than complex.<br>Complex is better than complicated.<br>Flat is better than nested.<br>Sparse is better than dense.<br>Readability counts.<br>Special cases aren’t special enough to break the rules.<br>Although practicality beats purity.<br>Errors should never pass silently.<br>Unless explicitly silenced.<br>In the face of ambiguity, refuse the temptation to guess.<br>There should be one– and preferably only one –obvious way to do it.<br>Although that way may not be obvious at first unless you’re Dutch.<br>Now is better than never.<br>Although never is often better than <em>right</em> now.<br>If the implementation is hard to explain, it’s a bad idea.<br>If the implementation is easy to explain, it may be a good idea.<br>Namespaces are one honking great idea – let’s do more of those!</p></blockquote><h4 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h4><blockquote><p>优美胜于丑陋（Python 以编写优美的代码为目标）<br>明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）<br>简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）<br>复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）<br>扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）<br>间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）<br>可读性很重要（优美的代码是可读的）<br>即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）<br>不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写 except:pass 风格的代码）<br>当存在多种可能，不要尝试去猜测<br>而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）<br>虽然这并不容易，因为你不是 Python 之父（这里的 Dutch 是指 Guido ）<br>做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）<br>如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准）<br>命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Beautiful is better than ugly.&lt;br&gt;Explicit is better than implicit.&lt;br&gt;Simple is better than complex.&lt;br&gt;Complex is better t
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python的字符串相关方法</title>
    <link href="http://yoursite.com/2018/04/18/python/Python%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/04/18/python/Python的字符串相关方法/</id>
    <published>2018-04-18T12:41:54.912Z</published>
    <updated>2018-04-18T15:43:41.032Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分割和合并"><a href="#分割和合并" class="headerlink" title="分割和合并"></a>分割和合并</h3><ol><li><p>string.split(sp, num)</p><blockquote><p>以 sp 分割字符串string，num是分割的次数，默认进行全分割，即num的默认值为string.count(sp)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">"It's a good day!"</span></span><br><span class="line"><span class="comment"># 使用空格进行分割</span></span><br><span class="line">list1 = str1.split(<span class="string">" "</span>)</span><br><span class="line">print(list1)</span><br><span class="line">[<span class="string">"It's"</span>, <span class="string">"a"</span>, <span class="string">"good"</span>, <span class="string">"day!"</span>]</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>string.splitlines( [ keepends ] )</p><blockquote><p>字符串string按照行（’\r’, ‘\r\n’, ‘\n’）进行分割，返回字符串各行作为元素的列表，若keepend的值为True，各元素保留换行符，默认为False，即不保留。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'''how are</span></span><br><span class="line"><span class="string">you ?</span></span><br><span class="line"><span class="string">i am</span></span><br><span class="line"><span class="string">fine</span></span><br><span class="line"><span class="string">!</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 不保留换行符</span></span><br><span class="line">list2 = str1.splitlines()</span><br><span class="line">print(list2)</span><br><span class="line">[<span class="string">'how are'</span>, <span class="string">'you ?'</span>, <span class="string">'i am'</span>, <span class="string">'fine'</span>, <span class="string">'!'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保留换行符</span></span><br><span class="line">list3 = str1.splitlines(keepends=<span class="keyword">True</span>)</span><br><span class="line">print(list3)</span><br><span class="line">[<span class="string">'how are\n'</span>, <span class="string">'you ?\n'</span>, <span class="string">'i am\n'</span>, <span class="string">'fine\n'</span>, <span class="string">'!\n'</span>]</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>string.join( seq )</p><blockquote><p>以指定的字符串string作为连接符，将seq中的所有元素（必须为字符或字符串）连接起来形成一个新的字符串</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>]</span><br><span class="line">str1 = <span class="string">"*"</span>join(list2)</span><br><span class="line">print(str1)</span><br><span class="line"><span class="string">'1*2*3*4'</span></span><br><span class="line"></span><br><span class="line">str2 = <span class="string">"abcd"</span></span><br><span class="line">str3 = <span class="string">"*"</span>.join(str2)</span><br><span class="line">print(str3)</span><br><span class="line"><span class="string">'a*b*c*d'</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h3><ol><li><p>string.replace(old, new [,count] )</p><blockquote><p>将字符串中的old替换成new，若不指定count，则默认全部替换，若指定count，则替换前count个</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">"how are you , i am fine thank you"</span></span><br><span class="line">str2 = str1.replace(<span class="string">"you"</span>, <span class="string">"me"</span>)</span><br><span class="line">print(str2)</span><br><span class="line"><span class="string">"how are me , i am fine thank me"</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="判断字符串的开头结尾"><a href="#判断字符串的开头结尾" class="headerlink" title="判断字符串的开头结尾"></a>判断字符串的开头结尾</h3><ol><li><p>string.startswith( str1 , start = 0, end = len(str) )</p><blockquote><p>在给定的范围内判断字符串是否以给定的字符串开头，如果没有指定范围，默认整个字符串</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">"aaa bbb  ccc  deee"</span></span><br><span class="line">print(str1.startswith(<span class="string">"aa"</span>))</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">str1 = <span class="string">"aaa bbb  ccc  deee"</span></span><br><span class="line">print(str1.startswith(<span class="string">"aa"</span>, <span class="number">3</span>, <span class="number">9</span>))</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>string.endswith( str1 , start = 0, end = len(str) )</p><blockquote><p>在给定的范围内判断字符串是否以指定的字符串结尾，若没有指定范围，默认为整个字符串</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">"aaa bbb  ccc  deee"</span></span><br><span class="line">print(str1.endswith(<span class="string">"e"</span>))</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">str1 = <span class="string">"aaa bbb  ccc  deee"</span></span><br><span class="line">print(str1.endswith(<span class="string">"e"</span>, <span class="number">3</span> ,<span class="number">9</span>))</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="编码与解码"><a href="#编码与解码" class="headerlink" title="编码与解码"></a>编码与解码</h3><ol><li><p>string.encode(encoding = “utf-8”, errors = “strict”)</p><blockquote><p>字符串的编码，若不指定encoding则默认选择utf-8</p><p>errors = ignore 的时候，忽略错误</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">"你好吗？"</span></span><br><span class="line">data = str1.encode()</span><br><span class="line">print(data)</span><br><span class="line">print(type(data))</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line"><span class="string">b'\xe4\xbd\xa0\xe5\xa5\xbd\xe5\x90\x97\xef\xbc\x9f'</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">bytes</span>'&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>string.encode(encoding = “utf-8”, errors = “strict”)</p><blockquote><p>对字符进行解码，若不指定编码格式，则默认选择utf-8</p><p>errors = ignore 的时候，忽略错误</p><p>解码时的编码格式要与编码时的保持一致</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">"你好吗？"</span></span><br><span class="line">data = str1.encode()</span><br><span class="line">print(data)</span><br><span class="line">print(type(data))</span><br><span class="line"><span class="string">b'\xe4\xbd\xa0\xe5\xa5\xbd\xe5\x90\x97\xef\xbc\x9f'</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">bytes</span>'&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line">data2 = data.decode()</span><br><span class="line">print(data2)</span><br><span class="line">print(type(data2))</span><br><span class="line">你好吗？</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br></pre></td></tr></table></figure><h3 id="字符串内容判断"><a href="#字符串内容判断" class="headerlink" title="字符串内容判断"></a>字符串内容判断</h3><ol><li><p>string.isalpha()</p><blockquote><p>字符串不为空，且字符串只包含字母时，返回True，否则返回False</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">"hello ni hao "</span></span><br><span class="line">print(str1.isalpha())</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line">str2 = <span class="string">"hellonahao"</span></span><br><span class="line">print(str2.isalpha())</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>string.isalnum()</p><blockquote><p>字符串不为空，且字符串只包含字母或数字是返回True，否则返回False</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">"sc22xdcd"</span></span><br><span class="line">str2 = <span class="string">"xdcd"</span></span><br><span class="line">str3 = <span class="string">"64646"</span></span><br><span class="line">print(str1.isalnum())</span><br><span class="line">print(str2.isalnum())</span><br><span class="line">print(str3.isalnum())</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>string.isupper()</p><blockquote><p>字符串至少包含一个字母，且字符串里面的字母都是大写时，返回True，否则返回False</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"123141"</span>.isupper())</span><br><span class="line">print(<span class="string">"acV141"</span>.isupper())</span><br><span class="line">print(<span class="string">"1AAA1"</span>.isupper())</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>string.islower()</p><blockquote><p>字符串至少包含一个字母，且字符串里面的字母都是小写时，返回True，否则返回False</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"123141"</span>.isupper())</span><br><span class="line">print(<span class="string">"acV141"</span>.isupper())</span><br><span class="line">print(<span class="string">"1aaa1"</span>.isupper())</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>string.istitle()</p><blockquote><p>若字符串是标题化（每个单词的首字母大写）的字符串，返回True，否则返回False</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Hello 123"</span>.istitle())</span><br><span class="line">print(<span class="string">"Hello World"</span>.istitle())</span><br><span class="line">print(<span class="string">"hello world"</span>.istitle())</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>string.isdigit()</p><blockquote><p>若字符串不为空，且字符串只包含Unicode数字、byte数字（单字节）、全角数字（双字节）时，返回True，否则返回False</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">isdigit()</span><br><span class="line"><span class="keyword">True</span>: Unicode数字，byte数字（单字节），全角数字（双字节）</span><br><span class="line"><span class="keyword">False</span>: 汉字数字， ，罗马数字</span><br><span class="line">Error: 无</span><br><span class="line">    </span><br><span class="line">print(<span class="string">b"111"</span>.isdigit())</span><br><span class="line">print(<span class="string">"111"</span>.isdigit())</span><br><span class="line">print(<span class="string">"a11"</span>.isdigit())</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>string.isnumeric()</p><blockquote><p>若字符串不为空，且字符串只包含Unicode数字、<strong>汉字数字</strong>、全角数字（双字节）时，返回True，否则返回False</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">isnumeric()</span><br><span class="line"><span class="keyword">True</span>: Unicode数字，全角数字（双字节），汉字数字</span><br><span class="line"><span class="keyword">False</span>: 罗马数字，</span><br><span class="line">Error: byte数字（单字节）</span><br><span class="line">    </span><br><span class="line">print(<span class="string">"111"</span>.isnumeric())</span><br><span class="line">print(<span class="string">"一二三四"</span>.isnumeric())</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">print(<span class="string">b"111"</span>.isnumeric())</span><br><span class="line">AttributeError: <span class="string">'bytes'</span> object has no attribute <span class="string">'isnumeric'</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>string.isdecimal()</p><blockquote><p>若字符串不为空，且字符串只包含Unicode数字、全角数字（双字节）时，返回True，否则返回False</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">isdecimal()</span><br><span class="line"><span class="keyword">True</span>: Unicode数字，，全角数字（双字节），</span><br><span class="line"><span class="keyword">False</span>: 罗马数字，汉字数字</span><br><span class="line">Error: byte数字（单字节）</span><br><span class="line">   </span><br><span class="line">print(<span class="string">"123"</span>.isdecimal())</span><br><span class="line">print(<span class="string">"123z"</span>.isdecimal())</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>string.isspace()</p><blockquote><p>若字符串不为空，且字符串只包含空格时，返回True，否则返回False</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">" "</span>.isspace())</span><br><span class="line">print(<span class="string">"\t"</span>.isspace())</span><br><span class="line">print(<span class="string">"\n"</span>.isspace())</span><br><span class="line">print(<span class="string">"\r"</span>.isspace())</span><br><span class="line">print(<span class="string">"  qq"</span>.isspace())</span><br><span class="line"></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="ASCII码转换"><a href="#ASCII码转换" class="headerlink" title="ASCII码转换"></a>ASCII码转换</h3><ol><li><p>ord(str)</p><blockquote><p>获取字符串的整数表示 ASCII码值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(ord(<span class="string">"A"</span>))</span><br><span class="line">print(ord(<span class="string">"你"</span>))</span><br><span class="line"></span><br><span class="line"><span class="number">65</span></span><br><span class="line"><span class="number">20320</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>chr(str)</p><blockquote><p>把ASCII编码转成对应的字符</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(chr(<span class="number">68</span>))</span><br><span class="line">print(chr(<span class="number">20320</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">"D"</span></span><br><span class="line"><span class="string">"你"</span></span><br></pre></td></tr></table></figure><p>​</p></li></ol><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;分割和合并&quot;&gt;&lt;a href=&quot;#分割和合并&quot; class=&quot;headerlink&quot; title=&quot;分割和合并&quot;&gt;&lt;/a&gt;分割和合并&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;string.split(sp, num)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以 sp 分割
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>tuple-元组</title>
    <link href="http://yoursite.com/2018/04/17/python/tuple-%E5%85%83%E7%BB%84/"/>
    <id>http://yoursite.com/2018/04/17/python/tuple-元组/</id>
    <published>2018-04-17T09:46:30.976Z</published>
    <updated>2018-04-17T09:57:50.870Z</updated>
    
    <content type="html"><![CDATA[<h3 id="元组的本质"><a href="#元组的本质" class="headerlink" title="元组的本质"></a>元组的本质</h3><blockquote><p>元组本质上是一种有序的集合，和列表很相似，列表使用[]表示，元组使用()表示。</p><p>元组一旦初始化，就不能发生改变</p></blockquote><h3 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建空的元组</span></span><br><span class="line">tuple1 = ()</span><br><span class="line">print(tuple1)</span><br><span class="line"><span class="comment">#创建带有元素的元组</span></span><br><span class="line">tuple2 =(<span class="number">22</span>, <span class="number">33</span>, <span class="number">14</span>, <span class="number">109</span>)</span><br><span class="line">print(tuple2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#与列表类似，元组中的元素类型可以不同</span></span><br><span class="line">tuple3 = (<span class="number">23</span>，<span class="keyword">True</span>，<span class="string">"good"</span>)</span><br><span class="line">print(tuple3)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义只有一个元素的元组</span></span><br><span class="line"><span class="comment">#这定义的不是元组而是整数1</span></span><br><span class="line">tuple4 = (<span class="number">1</span>)  </span><br><span class="line"><span class="comment">#定义一个元素的元组定义时必须加一个逗号",",用来消除歧义</span></span><br><span class="line">tuple4 = (<span class="number">1</span>,)</span><br></pre></td></tr></table></figure><h3 id="访问元组中的元素"><a href="#访问元组中的元素" class="headerlink" title="访问元组中的元素"></a>访问元组中的元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">print(tuple1[<span class="number">0</span>])</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment"># 获取最后一个元素</span></span><br><span class="line">print(tuple1[<span class="number">-1</span>])</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="comment"># 下标从0开始，当下标值越界时，将会报错，下面的访问将致使程序出错</span></span><br><span class="line">print(tuple1[<span class="number">4</span>])</span><br></pre></td></tr></table></figure><h3 id="让元组中的元素可修改"><a href="#让元组中的元素可修改" class="headerlink" title="让元组中的元素可修改"></a>让元组中的元素可修改</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在元组里存列表，就可以让元组里的元素可修改了</span></span><br><span class="line">tuple1 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>, [<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">tuple1[<span class="number">3</span>][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">print(tuple1)</span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">0</span>,<span class="number">6</span>])</span><br><span class="line"><span class="comment">#从表面上看我们的元组确实是改变了，</span></span><br><span class="line"><span class="comment">#但其实改变的不是我们的元组，而是list的元素，</span></span><br><span class="line"><span class="comment">#所谓的tuple不变是说，tuple的每个元素的指向永远不变，</span></span><br><span class="line"><span class="comment">#一旦它指向了这个list，就不能改指向其他的对象，</span></span><br><span class="line"><span class="comment">#但是指向的list本身是可变的！</span></span><br></pre></td></tr></table></figure><h3 id="元组操作"><a href="#元组操作" class="headerlink" title="元组操作"></a>元组操作</h3><ol><li><p>元组的连接组合、重复</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">tuple2 = (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">tuple3 = tuple1+tuple2</span><br><span class="line">print(tuple3)</span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">tuple4 = tuple1 * <span class="number">3</span></span><br><span class="line">print(tuple4)</span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li><li><p>元组截取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法：</span></span><br><span class="line"><span class="comment"># 元组名[start:end]  </span></span><br><span class="line"><span class="comment"># 截取的元组范围[start,end)</span></span><br><span class="line"><span class="comment"># 功能：获取开始下标到结束下标之前的所有元素。</span></span><br><span class="line"><span class="comment"># 若不指定start则默认是从开头开始截取到指定位置</span></span><br><span class="line"><span class="comment"># 若不指定end则默认从指定位置截取到结尾</span></span><br><span class="line">tuple1 = (<span class="number">1</span>,  <span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="string">'hello'</span>, <span class="string">'good'</span>)</span><br><span class="line"></span><br><span class="line">print(tuple1[<span class="number">2</span>:<span class="number">5</span>])</span><br><span class="line">(<span class="number">3</span>, <span class="number">8</span>, <span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line">print(tuple1[:<span class="number">5</span>])</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line">print(tuple1[<span class="number">3</span>:])</span><br><span class="line">(<span class="number">8</span>, <span class="string">'hello'</span>, <span class="string">'good'</span>)</span><br></pre></td></tr></table></figure></li><li><p>tuple(可迭代对象)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = tuple([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">print(tuple1)</span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">tuple2 = tuple(<span class="string">"123"</span>)</span><br><span class="line">print(tuple2)</span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">tuple3 = tuple(range(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">print(tuple3)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="二维元组"><a href="#二维元组" class="headerlink" title="二维元组"></a>二维元组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = ((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>),(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>),(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>))</span><br><span class="line"><span class="comment">#获取第一个元组的第一个元素</span></span><br><span class="line">print(tuple1[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;元组的本质&quot;&gt;&lt;a href=&quot;#元组的本质&quot; class=&quot;headerlink&quot; title=&quot;元组的本质&quot;&gt;&lt;/a&gt;元组的本质&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;元组本质上是一种有序的集合，和列表很相似，列表使用[]表示，元组使用()表示。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>list-列表</title>
    <link href="http://yoursite.com/2018/04/16/python/list-%E5%88%97%E8%A1%A8/"/>
    <id>http://yoursite.com/2018/04/16/python/list-列表/</id>
    <published>2018-04-16T14:08:01.937Z</published>
    <updated>2018-04-17T09:50:45.308Z</updated>
    
    <content type="html"><![CDATA[<h3 id="列表本质"><a href="#列表本质" class="headerlink" title="列表本质"></a>列表本质</h3><blockquote><p>list列表的本质是一种有序的集合</p></blockquote><h3 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建空列表</span></span><br><span class="line">list1 = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建带元素的列表</span></span><br><span class="line">list2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 含有多种元素的列表</span></span><br><span class="line">list3 = [<span class="number">123</span>, <span class="string">"abc"</span>, <span class="keyword">True</span>, <span class="number">1.234</span>]</span><br></pre></td></tr></table></figure><h3 id="列表元素的访问"><a href="#列表元素的访问" class="headerlink" title="列表元素的访问"></a>列表元素的访问</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">list4 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="comment"># 下标从0开始，最大值为len(list4)-1 在这里最大值为3</span></span><br><span class="line">print(list4[<span class="number">0</span>])</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment"># !!!当索引值大于len(list4)-1时，将会报下标越界错误：</span></span><br><span class="line">IndexError: list index out of range</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 列表元素的替换</span></span><br><span class="line">list4[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">print(list4)</span><br><span class="line">[<span class="number">10</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><h3 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a>列表操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列表组合</span></span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">list3 = list1 + list2</span><br><span class="line">print(list3)</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表重复</span></span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list2 = list1 * <span class="number">2</span></span><br><span class="line">print(list2)</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表截取</span></span><br><span class="line"><span class="comment"># 语法：列表[start: end] 表示获取从开始下标到结束下标的所有元素[start, end)</span></span><br><span class="line"><span class="comment">#若不指定start，则默认从0开始截取，截取到指定位置</span></span><br><span class="line"><span class="comment">#若不指定end，则从指定位置开始截取，截取到末尾结束</span></span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">print(list1[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(list1[:<span class="number">3</span>])</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(list1[<span class="number">3</span>:])</span><br><span class="line">[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#二维和取值</span></span><br><span class="line">list1 = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">print(list1[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="列表的方法"><a href="#列表的方法" class="headerlink" title="列表的方法"></a>列表的方法</h3><ol><li><p>list.append( 元素/列表 )</p><blockquote><p>在列表的末尾添加新的元素（即追加元素），可以追加普通元素，也可以追加一整个新的列表到列表尾部</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">#追加普通元素</span></span><br><span class="line">list1.append(<span class="number">4</span>)</span><br><span class="line">print(list1)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment">#追加列表</span></span><br><span class="line">list1.append([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>])</span><br><span class="line">print(list1)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]]</span><br></pre></td></tr></table></figure></li><li><p>list.extend(列表)</p><blockquote><p>在列表的末尾一次性追加另外一个列表中的多个值</p><p>extend()中的值只能是列表/元组[一个可迭代对象]，不能是元素</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">list2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">list1.extend(list2)</span><br><span class="line">print(list1)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure></li><li><p>list.insert(下标志, 元素/列表)</p><blockquote><p>在下标处插入元素，不覆盖原本的数据，原数据向后顺延</p><p>插入的数据可以是元素也可以为列表</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">list1.insert(<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">print(list1)</span><br><span class="line">[<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">list1.insert(<span class="number">1</span>, [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])</span><br><span class="line">print(list1)</span><br><span class="line">[<span class="number">1</span>, [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>], <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li><li><p>list.pop(下标值)</p><blockquote><p>移除列表中指定下标的元素（默认移除最后一个元素），并返回移除的数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">n = list1.pop()</span><br><span class="line">print(n)</span><br><span class="line"><span class="number">4</span></span><br><span class="line">print(list1)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li><li><p>list.clear()</p><blockquote><p>清空列表中的所有数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">list1.clear()</span><br><span class="line">print(list1)</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></li><li><p>list.index(元素  [,start】 [,stop ] )</p><blockquote><p>从指定的范围的列表中找出某个值第一次匹配的索引值 </p><p>若不指定范围，则默认是整个列表，若给范围，则是[start, stop )</p><p>注意：若在列表中找不到这个元素，则会报错</p></blockquote>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(list1.index(<span class="number">2</span>))</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>list.count(元素)</p><blockquote><p> 查看元素在列表中出现的次数</p></blockquote>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">print(list1.count(<span class="number">1</span>))</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>len(list)</p><blockquote><p>返回列表元素的个数</p></blockquote>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(len(list1))</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>max(list)</p><blockquote><p>返回列表中的最大值</p></blockquote>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">print(max(list1))</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></li><li><p>min(list)</p><blockquote><p>返回列表中的最小值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">print(min(list1))</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>list.reverse()</p><blockquote><p>列表倒叙</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>]</span><br><span class="line">list1.reverse()</span><br><span class="line">print(list1)</span><br><span class="line">[<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>​</p></li></ol><ol><li><p>list.sort()</p><blockquote><p>列表排序，默认为升序排序</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>]</span><br><span class="line"><span class="comment"># 默认排序</span></span><br><span class="line">list1.sort()</span><br><span class="line">print(list1)</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="comment"># 降序排序</span></span><br><span class="line">list1.sort( reverse = <span class="keyword">True</span> )</span><br><span class="line">print(list1)</span><br><span class="line">[<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>​</p></li></ol><ol><li><p>浅拷贝</p><blockquote><p>浅拷贝为应用拷贝，类似于快捷方式</p></blockquote></li></ol>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list2 = list1</span><br><span class="line">print(list2)</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">print(id(list1))</span><br><span class="line"><span class="number">4314476123</span></span><br><span class="line"></span><br><span class="line">print(id(list2))</span><br><span class="line"><span class="number">4314476123</span></span><br><span class="line"><span class="comment"># 改变list2,list1也会改变，反之亦然</span></span><br><span class="line">list2.append(<span class="number">4</span>)</span><br><span class="line">print(list1)</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><ol><li><p>深拷贝</p><blockquote><p>深拷贝为内存拷贝，开辟了新的内存空间</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment"># 一般这样做</span></span><br><span class="line">list2 = list1.copy()</span><br><span class="line"><span class="comment"># 这样做也可以达到同样的效果！</span></span><br><span class="line">list2 = list1 * <span class="number">1</span></span><br><span class="line">list2 = list1 + []</span><br><span class="line"></span><br><span class="line">print(list2)</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">print(id(list1))</span><br><span class="line"><span class="number">39681480</span></span><br><span class="line"></span><br><span class="line">print(id(list2))</span><br><span class="line"><span class="number">39678920</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变list2,list1不会改变，反之亦然</span></span><br><span class="line">list2.append(<span class="number">4</span>)</span><br><span class="line">print(list1)</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>list(可迭代对象)</p><blockquote><p>将一个可迭代对象转为列表</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">list1 = list(t)</span><br><span class="line">print(list1)</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">s = <span class="string">"123"</span></span><br><span class="line">list2 = list(s)</span><br><span class="line">print(list2)</span><br><span class="line">[<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>]</span><br><span class="line"></span><br><span class="line">list3 = list(range(<span class="number">1</span>,<span class="number">4</span>))</span><br><span class="line">print(list3)</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;列表本质&quot;&gt;&lt;a href=&quot;#列表本质&quot; class=&quot;headerlink&quot; title=&quot;列表本质&quot;&gt;&lt;/a&gt;列表本质&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;list列表的本质是一种有序的集合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;创建列表&quot;
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python的数字类型和相关函数</title>
    <link href="http://yoursite.com/2018/04/14/python/python%E7%9A%84%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B%E5%92%8C%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/04/14/python/python的数字类型和相关函数/</id>
    <published>2018-04-14T07:42:10.911Z</published>
    <updated>2018-04-14T08:27:11.007Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数字类型之间的转换"><a href="#数字类型之间的转换" class="headerlink" title="数字类型之间的转换"></a>数字类型之间的转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将x转为一个整数</span></span><br><span class="line">int(x)</span><br><span class="line"><span class="comment"># 将x转为一个浮点数</span></span><br><span class="line">float(x)</span><br><span class="line"><span class="comment"># 如果有其他非数字字符（除'.','+','-'），程序将报错</span></span><br></pre></td></tr></table></figure><h3 id="进制之间的转换"><a href="#进制之间的转换" class="headerlink" title="进制之间的转换"></a>进制之间的转换</h3><p><strong>十进制转换为二进制</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(<span class="number">10</span>)</span><br><span class="line"><span class="string">'0b1010'</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">'&#123;0:b&#125;'</span>.format(<span class="number">10</span>)</span><br><span class="line"><span class="string">'1010'</span></span><br></pre></td></tr></table></figure><p><strong>十进制转为八进制</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>oct(<span class="number">12</span>)</span><br><span class="line"><span class="string">'014'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;0:o&#125;'</span>.format(<span class="number">12</span>)</span><br><span class="line"><span class="string">'14'</span></span><br></pre></td></tr></table></figure><p><strong>十进制转为十六进制</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(<span class="number">12</span>)</span><br><span class="line"><span class="string">'0xc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;0:x&#125;'</span>.format(<span class="number">12</span>)</span><br><span class="line"><span class="string">'c'</span></span><br></pre></td></tr></table></figure><p><strong>二进制转为十进制</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'1010'</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">'0b10'</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>八进制转为十进制</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'0o14'</span>, <span class="number">8</span>)</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;0:d&#125;'</span>.format(<span class="number">0o14</span>)</span><br><span class="line"><span class="string">'12'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">'0o10'</span>)</span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><p><strong>十六进制转十进制</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'0xc'</span>,<span class="number">16</span>)</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;0:d&#125;'</span>.format(<span class="number">0xc</span>)</span><br><span class="line"><span class="string">'12'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">'0x10'</span>)</span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure><p>注意:</p><p>hex函数比格式化字符串函数format慢,不推荐使用.</p><p>eval函数比int函数慢,不推荐使用</p><h3 id="内置数学函数"><a href="#内置数学函数" class="headerlink" title="内置数学函数"></a>内置数学函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 求绝对值</span></span><br><span class="line">abs(<span class="number">-1</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment"># 求最大值,参数为一个可迭代对象</span></span><br><span class="line">max(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="comment"># 求最小值,参数为一个可迭代对象</span></span><br><span class="line">min(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment"># 求x的y次方的值</span></span><br><span class="line">pow(x,y)</span><br><span class="line"><span class="comment"># 返回浮点数x的四舍五入值，n为保留的小数的位数</span></span><br><span class="line">round(x,n)</span><br></pre></td></tr></table></figure><h3 id="math模块"><a href="#math模块" class="headerlink" title="math模块"></a>math模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment"># 向上取整，以下结果都为19</span></span><br><span class="line">math.ceil(<span class="number">18.1</span>)</span><br><span class="line">math.ceil(<span class="number">18.9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向下取整，以下结果都为18</span></span><br><span class="line">math.floor(<span class="number">18.1</span>)</span><br><span class="line">math.floor(<span class="number">18.9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回整数部分与小数部分</span></span><br><span class="line">math.modf(<span class="number">10.1234</span>)</span><br><span class="line">(<span class="number">10</span>,<span class="number">0.1234</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开方</span></span><br><span class="line">math.sqrt(<span class="number">16</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="comment"># 三角函数：cos(x)、sin(x)、tan(x)等</span></span><br></pre></td></tr></table></figure><h3 id="random模块"><a href="#random模块" class="headerlink" title="random模块"></a>random模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先说说rang()</span></span><br><span class="line"><span class="comment"># range([start,] stop[, step])</span></span><br><span class="line"><span class="comment"># range()函数返回一个可迭代对象</span></span><br><span class="line"><span class="comment"># start:计数从start开始,默认从0开始</span></span><br><span class="line"><span class="comment"># stop:计数到stop结束,但不包括stop</span></span><br><span class="line"><span class="comment"># step: 步长,默认为1</span></span><br><span class="line">nums = range(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 使用list可以把可迭代对象转为一个列表,返回的类型为列表</span></span><br><span class="line">list(nums)</span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从指定的序列中随机返回一个元素</span></span><br><span class="line">random.choice([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#从指定范围内，按指定的基数递增的集合中选取一个随机整数</span></span><br><span class="line"><span class="comment">#random.randrange([start,]stop[, step])</span></span><br><span class="line"><span class="comment">#start:指定范围的开始值，包含在范围内，默认是0</span></span><br><span class="line"><span class="comment">#stop：指定范围结束值，不包含在范围内</span></span><br><span class="line"><span class="comment">#step：指定的递增基数，默认是1</span></span><br><span class="line">random.randrange(<span class="number">1</span>,<span class="number">100</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机生成区间[3,9]之间的整数</span></span><br><span class="line">random.randint(<span class="number">3</span>,<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#随机产生[0，1）之间的数(浮点数)</span></span><br><span class="line">random.random()</span><br><span class="line"></span><br><span class="line"><span class="comment">#随机产生一个实数，在[3，9]范围内</span></span><br><span class="line">random.uniform(<span class="number">3</span>,<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">23</span>, <span class="number">21</span>]</span><br><span class="line"><span class="comment">#将序列的所有元素随机排序</span></span><br><span class="line">random.shuffle(list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从序列中随机返回n个元素</span></span><br><span class="line">random.sample(series,num)</span><br><span class="line">栗子：</span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">random.sample(list1, <span class="number">2</span>)</span><br><span class="line">[<span class="number">5</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h3 id="python中比较特别的运算符"><a href="#python中比较特别的运算符" class="headerlink" title="python中比较特别的运算符"></a>python中比较特别的运算符</h3><h5 id="个人觉得有几个运算符是比较特别的，大部分语言没有这种用法"><a href="#个人觉得有几个运算符是比较特别的，大部分语言没有这种用法" class="headerlink" title="个人觉得有几个运算符是比较特别的，大部分语言没有这种用法"></a>个人觉得有几个运算符是比较特别的，大部分语言没有这种用法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">** ：幂，返回x的y次幂  a**b=<span class="number">10</span>^<span class="number">20</span></span><br><span class="line">// : 取整除返回商的整数部分  <span class="number">9</span>//<span class="number">2</span>=<span class="number">4</span>, <span class="number">9.0</span>//<span class="number">2.0</span>=<span class="number">4.0</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">in</span>:如果在指定的序列中找到返回值<span class="keyword">True</span>，否则返回<span class="keyword">False</span></span><br><span class="line"><span class="keyword">not</span> <span class="keyword">in</span>:如果在指定的序列中没有找到值返回<span class="keyword">True</span>，否则返回<span class="keyword">False</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">is</span>：<span class="keyword">is</span>判断两个标识符是不是引用自一个对象</span><br><span class="line"><span class="keyword">is</span> <span class="keyword">not</span>：<span class="keyword">is</span>判断两个标识符是不是引用自一个对象</span><br></pre></td></tr></table></figure><p>##### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数字类型之间的转换&quot;&gt;&lt;a href=&quot;#数字类型之间的转换&quot; class=&quot;headerlink&quot; title=&quot;数字类型之间的转换&quot;&gt;&lt;/a&gt;数字类型之间的转换&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>冒泡排序算法</title>
    <link href="http://yoursite.com/2018/04/10/python/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/04/10/python/冒泡排序算法/</id>
    <published>2018-04-10T11:43:29.585Z</published>
    <updated>2018-04-10T11:43:29.969Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>排序算法有很多种，比如快速排序、选择排序、冒泡排序等等，这里用python实现了一个简单的冒泡排序，参数是一个无序的列表，返回值是经过排序后的列表。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用python实现冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort</span><span class="params">(li)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(li)<span class="number">-1</span>):</span><br><span class="line">flag = <span class="keyword">True</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(li)-i<span class="number">-1</span>):</span><br><span class="line"><span class="keyword">if</span> li[j] &lt; li[j+<span class="number">1</span>]:</span><br><span class="line">li[j],li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>],li[j]</span><br><span class="line">flag = <span class="keyword">False</span></span><br><span class="line"><span class="keyword">if</span> flag:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">return</span> li</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;排序算法有很多种，比如快速排序、选择排序、冒泡排序等等，这里用python实现了一个简单的冒泡排序，参数是一个无序的列表，返回值是经过排序后的列表。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>水仙花数</title>
    <link href="http://yoursite.com/2018/03/28/python/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0/"/>
    <id>http://yoursite.com/2018/03/28/python/水仙花数/</id>
    <published>2018-03-28T11:30:07.175Z</published>
    <updated>2018-03-28T11:30:07.300Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>找出所有的水仙花数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>,<span class="number">1000</span>):</span><br><span class="line">a = i//<span class="number">100</span></span><br><span class="line">b = (i-a*<span class="number">100</span>)//<span class="number">10</span></span><br><span class="line">c = i%<span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> a**<span class="number">3</span> + b**<span class="number">3</span> + c**<span class="number">3</span> == i:</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><blockquote><p>结果：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">153</span></span><br><span class="line"><span class="number">370</span></span><br><span class="line"><span class="number">371</span></span><br><span class="line"><span class="number">407</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;找出所有的水仙花数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法</title>
    <link href="http://yoursite.com/2018/03/27/others/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2018/03/27/others/markdown基本语法/</id>
    <published>2018-03-27T03:48:11.730Z</published>
    <updated>2018-03-27T11:35:44.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="markdown基本语法"><a href="#markdown基本语法" class="headerlink" title="markdown基本语法"></a>markdown基本语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">无序列表：</span><br><span class="line"><span class="bullet">* </span>列表项</span><br><span class="line"><span class="bullet">* </span>列表项</span><br><span class="line"><span class="bullet">* </span>列表项</span><br><span class="line">有序列表：</span><br><span class="line"><span class="bullet">1. </span>列表项</span><br><span class="line"><span class="bullet">2. </span>列表项</span><br><span class="line"><span class="bullet">3. </span>列表项</span><br></pre></td></tr></table></figure><h2 id="显示文本块"><a href="#显示文本块" class="headerlink" title="显示文本块"></a>显示文本块</h2> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br></pre></td></tr></table></figure><h2 id="字体加粗"><a href="#字体加粗" class="headerlink" title="字体加粗"></a>字体加粗</h2> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**文字**</span></span><br></pre></td></tr></table></figure><h2 id="添加代码块"><a href="#添加代码块" class="headerlink" title="添加代码块"></a>添加代码块</h2> <figure class="highlight markdown"><figcaption><span>​</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```language</span></span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 添加图片</span><br><span class="line"></span><br><span class="line">​```markdown</span><br><span class="line"> ![图片](图片地址)</span><br></pre></td></tr></table></figure><h2 id="添加链接"><a href="#添加链接" class="headerlink" title="添加链接"></a>添加链接</h2>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">文本</span>](<span class="link">链接地址</span>)</span><br></pre></td></tr></table></figure><h2 id="添加表格"><a href="#添加表格" class="headerlink" title="添加表格"></a>添加表格</h2> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| first | second |</span><br><span class="line">| ----- | ------ |</span><br><span class="line">|       |        |</span><br></pre></td></tr></table></figure><h2 id="公式块"><a href="#公式块" class="headerlink" title="公式块"></a>公式块</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;markdown基本语法&quot;&gt;&lt;a href=&quot;#markdown基本语法&quot; class=&quot;headerlink&quot; title=&quot;markdown基本语法&quot;&gt;&lt;/a&gt;markdown基本语法&lt;/h1&gt;&lt;h2 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>初学python</title>
    <link href="http://yoursite.com/2018/03/27/python/%E5%88%9D%E5%AD%A6python/"/>
    <id>http://yoursite.com/2018/03/27/python/初学python/</id>
    <published>2018-03-27T02:10:34.706Z</published>
    <updated>2018-04-14T08:27:04.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初学python"><a href="#初学python" class="headerlink" title="初学python"></a>初学python</h1><blockquote><p>面向对象、解释型、动态数据类型的高级程序设计语言</p><p>作者：荷兰人Guido van Rossum于1989年发明，第一个公开发行版发行于1991年，遵循GPL协议</p></blockquote><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>简单易学</li><li>免费开源</li><li>已于维护</li><li>代码易读性高，编程方式较为优雅</li></ul><ul><li>可移植性强</li><li>面向对象</li><li>可嵌入</li><li>一个标准的</li><li>支持GUI编程</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>运行速度慢（与C语言相比，比起JAVA性能也较差）</li><li>代码不可加密</li></ul><h3 id="python能做什么"><a href="#python能做什么" class="headerlink" title="python能做什么"></a>python能做什么</h3><ul><li>网络后端</li><li>自动化运维</li><li>数据分析</li><li>自动化测试</li><li>网络爬虫</li><li>人工智能</li></ul><h3 id="python的三种运行方式"><a href="#python的三种运行方式" class="headerlink" title="python的三种运行方式"></a>python的三种运行方式</h3><ul><li>交互式解释其模式</li><li>命令行脚步模式</li><li>集成开发环境</li></ul><h3 id="python的编码规范"><a href="#python的编码规范" class="headerlink" title="python的编码规范"></a>python的编码规范</h3><ul><li>不以分好结尾</li><li>尽量控制每行代码的长度，不要多于80个字符</li><li>代码的包含关系用缩进控制，每一层级最好用四空格控制</li><li>顶级定义之间空两行，方法之间空一行</li><li>每个语句都应该占据一行</li><li>不要滥用括号</li><li>文件名不能出现中文或空格</li></ul><h3 id="标识符规则"><a href="#标识符规则" class="headerlink" title="标识符规则"></a>标识符规则</h3><ul><li>只能由字母、数字、下划线组成</li><li>开头不能是数字</li><li>不能是python的关键字<br>例如：def  False True and break class del 等等</li><li>区分大小写</li><li>取名字要做到见名知义</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li><p>Number(数字)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">整数</span><br><span class="line">浮点数</span><br><span class="line">复数：（a+bj）或者complex(a,b)表示，实部a和虚部b都是浮点型</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>String(字符串)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"hello world"</span></span><br><span class="line"><span class="string">'hello world'</span></span><br><span class="line"><span class="string">'hello world\n'</span> <span class="comment">#斜杠表示转译</span></span><br><span class="line"><span class="string">r'hello world\n'</span> <span class="comment">#r表示忽略转译</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>Boolean(布尔值)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">True</span>(<span class="number">1</span>)/<span class="keyword">False</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>None(空值)</p></li><li><p>list(列表)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有序的集合</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">[<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>]</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>tuple(元组)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 与list类似，但初始化后就不能再改变</span></span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">（<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>）</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>dict(字典)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用键-值（key-value）存储，key是唯一的，dict是无序的</span></span><br><span class="line">&#123;<span class="string">"a"</span>:<span class="number">1</span>,<span class="string">"b"</span>:<span class="number">2</span>,<span class="string">"c"</span>:<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>set(集合)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以看做只存储key的dict,因此每个元素都是唯一的</span></span><br><span class="line">&#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义：变量名=变量值，一个变量也可以反复赋值，而且可以是不同类型的变量</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="string">"hello world"</span></span><br><span class="line"><span class="comment"># 常量：程序运行期间不能改变的数据</span></span><br><span class="line"><span class="comment">#如：数字和字符、字符串</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="string">'a'</span></span><br></pre></td></tr></table></figure><p><strong>在python里，不管是什么类型的变量，都可以直接输出！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;初学python&quot;&gt;&lt;a href=&quot;#初学python&quot; class=&quot;headerlink&quot; title=&quot;初学python&quot;&gt;&lt;/a&gt;初学python&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;面向对象、解释型、动态数据类型的高级程序设计语言&lt;/p&gt;
&lt;p&gt;作
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>3D盒子</title>
    <link href="http://yoursite.com/2018/03/10/fron-end/3d-box/"/>
    <id>http://yoursite.com/2018/03/10/fron-end/3d-box/</id>
    <published>2018-03-10T03:28:25.087Z</published>
    <updated>2018-03-10T03:50:37.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS3制作简单的3D盒子"><a href="#CSS3制作简单的3D盒子" class="headerlink" title="CSS3制作简单的3D盒子"></a>CSS3制作简单的3D盒子</h1><h2 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"front"</span>&gt;</span>前<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"back"</span>&gt;</span>后<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span>上<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span>下<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSS代码"><a href="#CSS代码" class="headerlink" title="CSS代码"></a>CSS代码</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;<span class="attribute">height</span>: <span class="number">200px</span>;<span class="attribute">width</span>: <span class="number">200px</span>;<span class="attribute">margin</span>: <span class="number">50px</span> auto;<span class="attribute">position</span>: relative;<span class="attribute">transition</span>: <span class="number">1s</span> all ease ;<span class="attribute">transform</span>: <span class="built_in">perspective</span>(700px) <span class="built_in">rotateX</span>(0deg) <span class="built_in">rotateY</span>(0deg); <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">transform</span>: <span class="built_in">perspective</span>(700px) <span class="built_in">rotateY</span>(90deg) <span class="built_in">rotateX</span>(90deg);&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">div</span>&#123;<span class="attribute">width</span>: <span class="number">198px</span>;<span class="attribute">height</span>: <span class="number">198px</span>;<span class="attribute">position</span>: absolute;<span class="attribute">top</span>: <span class="number">0px</span>;<span class="attribute">right</span>: <span class="number">0px</span>; <span class="attribute">background</span>:<span class="built_in">rgba</span>(0,255,0,0.5)&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.front</span>&#123;<span class="attribute">transform</span>: <span class="built_in">translateZ</span>(100px);&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.back</span>&#123;<span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-100px);&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.left</span>&#123;<span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-90deg) <span class="built_in">translateZ</span>(100px);&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.right</span>&#123;<span class="attribute">transform</span>: <span class="built_in">rotateY</span>(90deg) <span class="built_in">translateZ</span>(100px);&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.top</span>&#123;<span class="attribute">transform</span>: <span class="built_in">rotateX</span>(90deg) <span class="built_in">translateZ</span>(100px);&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.bottom</span>&#123;<span class="attribute">transform</span>: <span class="built_in">rotateX</span>(-90deg) <span class="built_in">translateZ</span>(100px);&#125;</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><div style="height: 200px;width: 200px;margin: 50px auto;position: relative;transition: 1s all ease ;transform: perspective(700px) rotateX(0deg) rotateY(0deg); transform-style: preserve-3d;" onmouseover="this.style.transform='perspective(700px) rotateY(90deg) rotateX(90deg)';" onmouseout="this.style.transform='perspective(700px) rotateY(0deg) rotateX(0deg)';"><br>  <div style="width: 198px;height: 198px;position: absolute;top: 0px;right: 0px; background:rgba(0,255,0,0.5);transform: translateZ(100px);">前</div><br>  <div style="width: 198px;height: 198px;position: absolute;top: 0px;right: 0px; background:rgba(0,255,0,0.5);transform: translateZ(-100px);">后</div><br>  <div style="width: 198px;height: 198px;position: absolute;top: 0px;right: 0px; background:rgba(0,255,0,0.5);transform: rotateY(-90deg) translateZ(100px);">左</div><br>  <div style="width: 198px;height: 198px;position: absolute;top: 0px;right: 0px; background:rgba(0,255,0,0.5);transform: rotateY(90deg) translateZ(100px);">右</div><br>  <div style="width: 198px;height: 198px;position: absolute;top: 0px;right: 0px; background:rgba(0,255,0,0.5);transform: rotateX(90deg) translateZ(100px);">上</div><br>  <div style="width: 198px;height: 198px;position: absolute;top: 0px;right: 0px; background:rgba(0,255,0,0.5);transform: rotateX(-90deg) translateZ(100px);">下</div><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CSS3制作简单的3D盒子&quot;&gt;&lt;a href=&quot;#CSS3制作简单的3D盒子&quot; class=&quot;headerlink&quot; title=&quot;CSS3制作简单的3D盒子&quot;&gt;&lt;/a&gt;CSS3制作简单的3D盒子&lt;/h1&gt;&lt;h2 id=&quot;HTML代码&quot;&gt;&lt;a href=&quot;#HTM
      
    
    </summary>
    
    
      <category term="CSS3" scheme="http://yoursite.com/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>PHP小知识点-序列1</title>
    <link href="http://yoursite.com/2018/02/12/php/php-knowledge-1/"/>
    <id>http://yoursite.com/2018/02/12/php/php-knowledge-1/</id>
    <published>2018-02-12T13:52:34.032Z</published>
    <updated>2018-02-12T14:27:09.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP小知识点-序列1"><a href="#PHP小知识点-序列1" class="headerlink" title="PHP小知识点-序列1"></a>PHP小知识点-序列1</h1><h3 id="双引号和单引号的区别"><a href="#双引号和单引号的区别" class="headerlink" title="双引号和单引号的区别"></a>双引号和单引号的区别</h3><ol><li>双引号解释变量，单引号不解释变量</li><li>双引号里插入单引号，其中单引号里如果有变量的话，变量解释</li><li>双引号的变量名后面必须要有一个非数字、字母、下划线的特殊字符，或者用花括号将变量括起来，否则会将变量名后面的部分当做一个整体，引起语法错误</li><li>双引号解释转义字符，单引号不解释转义字符，但是解释\和\\</li><li>能使单引号字符尽量使用单引号，单引号的效率比双引号要高（因为双引号要先遍历一遍，判断里面有没有变量，然后再进行操作，而单引号则不需要判断）</li></ol><h3 id="常用的超全局变量-8个"><a href="#常用的超全局变量-8个" class="headerlink" title="常用的超全局变量-8个"></a>常用的超全局变量-8个</h3><ol><li>$_GET<blockquote><p>获取get方式的值</p></blockquote></li><li>$_POST<blockquote><p>获取post方式的值</p></blockquote></li><li>$_REQUEST<blockquote><p>获取get和post两种请求方式的值</p></blockquote></li><li>$GLOBALS<blockquote><p>以变量名为键，变量值为值，存放在该数组里</p></blockquote></li><li>$_FILES<blockquote><p>上传文件是获取文件信息</p></blockquote></li><li>$_SERVER<blockquote><p>一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。这个数组中的项目由 Web 服务器创建。不能保证每个服务器都提供全部项目；服务器可能会忽略一些，或者提供一些没有在这里列举出来的项目。</p></blockquote></li><li>$_SESSION<blockquote><p>设置或获取对应session</p></blockquote></li><li>$_COOKIE<blockquote><p>获取对应cookie信息</p></blockquote></li></ol><h3 id="语句include和require的区别"><a href="#语句include和require的区别" class="headerlink" title="语句include和require的区别"></a>语句include和require的区别</h3><ol><li>require是无条件包含，也就是如果一个流程里加入require，无论条件成立与否都会先执行require，当文件不存在或者无法打开的时候，会提示错误，并且会终止程序执行（即包含文件不存在或者语法错误的时候require是致命的，而include不是）</li><li>include有返回值，而require没有(可能因为如此require的速度比include快)，如果被包含的文件不存在，那么会提示一个错误，但是程序会继续执行下去</li><li>require_once和include_once都表示表示包含一次，避免了重复包含</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PHP小知识点-序列1&quot;&gt;&lt;a href=&quot;#PHP小知识点-序列1&quot; class=&quot;headerlink&quot; title=&quot;PHP小知识点-序列1&quot;&gt;&lt;/a&gt;PHP小知识点-序列1&lt;/h1&gt;&lt;h3 id=&quot;双引号和单引号的区别&quot;&gt;&lt;a href=&quot;#双引号和单引号
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>jsonp-introduction</title>
    <link href="http://yoursite.com/2018/01/27/fron-end/jsonp-introduction/"/>
    <id>http://yoursite.com/2018/01/27/fron-end/jsonp-introduction/</id>
    <published>2018-01-27T04:09:23.000Z</published>
    <updated>2018-02-12T13:52:54.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSONP简介"><a href="#JSONP简介" class="headerlink" title="JSONP简介"></a>JSONP简介</h1><blockquote><p>JSONP是JSON with padding(填充式JSON或参数式JSON)的简写。<br>我们都知道Netscape著名的安全策略——同源策略，该策略是不允许进行跨域请求的，而jsonp 就是解决跨域请求的方式之一，不过目前的趋势可能会越用越少，因为已经有新的更好的跨域请求方式，比如：ajax跨域——CORS跨域。<br>由于<code>&lt;script&gt;</code>标签加载的数据是不受同源策略，jsonp正是利用这一点，在网页里面添加一个<code>&lt;script&gt;</code>元素，向服务器请求json数据，服务器返回的json数据会放在指定的回调函数里传回来，而客户端只需要实现这个回调函数做什么就可以了。</p></blockquote><p> 当通过<code>&lt;script&gt;</code>元素调用数据时，响应内容必须用javascript函数名和圆括号包裹起来。而不是发送这样一段JSON数据，这就是JSONP中P的意义所在:<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callback(json_data);</span><br></pre></td></tr></table></figure></p><h3 id="百度的jsonp"><a href="#百度的jsonp" class="headerlink" title="百度的jsonp"></a>百度的jsonp</h3><p>我们经常用的百度搜索就使用了jsonp技术，当我们在搜索框输入内容的时候，f12打开控制台的network可以看到网页加载了一个<code>&lt;script&gt;</code>，请求的链接如下：</p><blockquote><p><a href="https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=j&amp;json=1&amp;p=3&amp;sid=1432_21093&amp;req=2&amp;bs=jsonp&amp;csor=1&amp;cb=jQuery110206596423797291286_1517021405329&amp;_=1517021405334" target="_blank" rel="noopener">https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=j&amp;json=1&amp;p=3&amp;sid=1432_21093&amp;req=2&amp;bs=jsonp&amp;csor=1&amp;cb=jQuery110206596423797291286_1517021405329&amp;_=1517021405334</a></p></blockquote><p>链接里主要用来实现jsonp的参数就是wd和cb，wd是你输入的内容，而cb是回调函数的名称。<br>我们可以试一下在浏览器中输入这段地址请求：</p><blockquote><p><a href="https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=js&amp;cb=show" target="_blank" rel="noopener">https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=js&amp;cb=show</a></p></blockquote><p>你会得到这样的响应结果：</p><blockquote><p>show({q:”js”,p:false,s:[“json在线解析”,”json”,”建设银行”,”计算器”,”js保留两位小数”,”json.stringify()”,”json格式化”,”jsp”,”js 数组”,”js刷新当前页面”]});</p></blockquote><p>把这段响应结果放进<code>&lt;script&gt;</code>标签加载进来会怎样呢？不就是相当于调用show方法吗，而且传入了一个json数据。<br>其实这就是jsonp的实现过程，需要后端的配合实现，即后端帮你拿数据，然后利用<code>&lt;script&gt;</code>标签把数据加载进页面。</p><h3 id="我们来试一下用百度的jsonp为我们搜索数据"><a href="#我们来试一下用百度的jsonp为我们搜索数据" class="headerlink" title="我们来试一下用百度的jsonp为我们搜索数据"></a>我们来试一下用百度的jsonp为我们搜索数据</h3><ol><li><p>html代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jsonp<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"search"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"option"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>js代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">let</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'option'</span>);</span><br><span class="line"></span><br><span class="line">  oUl.innerHTML = <span class="string">''</span>;</span><br><span class="line">  data.s.forEach(<span class="function"><span class="params">str</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> oLi = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">    oLi.innerHTML=str;</span><br><span class="line">    oUl.appendChild(oLi);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> inp = <span class="built_in">document</span>.getElementById(<span class="string">'search'</span>);</span><br><span class="line"></span><br><span class="line">  inp.oninput = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> oScript = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    oScript.src = <span class="string">`https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(inp.value)&#125;</span>&amp;cb=show`</span>;</span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(oScript);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在搜索框输入内容可以看到如下效果：<br><br><img src="/2018/01/27/fron-end/jsonp-introduction/jsonp.PNG" alt="alt jsonp"></p></li></ol><p><strong>这里需要注意的就是，在插入<code>&lt;script&gt;</code>的时候，每次都要创建一个新的<code>&lt;script&gt;</code>重新插入</strong></p><blockquote><p>以上就是我对jsonp的粗略见解，虽说jsonp以后可能会被新的技术取代，不过多了解一些解决方法，还是有利于知识面的扩展的，正所谓技多不压身。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JSONP简介&quot;&gt;&lt;a href=&quot;#JSONP简介&quot; class=&quot;headerlink&quot; title=&quot;JSONP简介&quot;&gt;&lt;/a&gt;JSONP简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;JSONP是JSON with padding(填充式JSON或参数式JS
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>第一篇hexo</title>
    <link href="http://yoursite.com/2018/01/26/others/%E7%AC%AC%E4%B8%80%E7%AF%87hexo/"/>
    <id>http://yoursite.com/2018/01/26/others/第一篇hexo/</id>
    <published>2018-01-26T13:22:30.569Z</published>
    <updated>2018-01-26T13:25:25.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一次使用hexo搭建博客"><a href="#第一次使用hexo搭建博客" class="headerlink" title="第一次使用hexo搭建博客"></a>第一次使用hexo搭建博客</h1><blockquote><p>我还是先学学markdown语法吧。。。。。。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一次使用hexo搭建博客&quot;&gt;&lt;a href=&quot;#第一次使用hexo搭建博客&quot; class=&quot;headerlink&quot; title=&quot;第一次使用hexo搭建博客&quot;&gt;&lt;/a&gt;第一次使用hexo搭建博客&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;我还是先学学markdow
      
    
    </summary>
    
    
      <category term="diary" scheme="http://yoursite.com/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/01/26/others/hello-world/"/>
    <id>http://yoursite.com/2018/01/26/others/hello-world/</id>
    <published>2018-01-26T12:49:22.043Z</published>
    <updated>2018-02-12T13:53:09.868Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="diary" scheme="http://yoursite.com/tags/diary/"/>
    
  </entry>
  
</feed>
